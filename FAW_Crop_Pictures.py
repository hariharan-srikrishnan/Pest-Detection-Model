from PIL import Image
import json
import argparse

# flag -d --disable-verbose does not print the intermediate steps
'''
	This cropping tool is written to work with the JSON file format obtained 
	from the Dataturks labelling tool. Might not work with other JSON file
	formats
'''


# Path to the image folder (NOTE: relative paths sometimes cause issues with PIL)
image_path = '/home/hariharan/Code/PS-1/prj/FAW_Images/'
# Path to the folder to save the cropped images (NOTE: relative paths sometimes cause issues with PIL)
save_path = '/home/hariharan/Code/PS-1/prj/FAW_Images/Cropped_Images/'

# Path to the JSON file generated by the Dataturks labelling tool
json_file = 'FAW Test.json'

# Parsing CLI arguments
parser = argparse.ArgumentParser()
parser.add_argument('-d', '--disableVerbose', action='store_true',
					 help='disables verbosity')
args = parser.parse_args()


def crop_images():
	
	# Checking if save directory exists. If not, creating the save directory
	if not os.path.exists(save_path):
		os.makedirs(save_path)

	try:
		with open(json_file, 'r') as f1:
			for line in f1:
				x = json.loads(line)
				file_name = image_path + x['content'].split('/')[-1]
				img = Image.open(file_name)
				height = x['annotation'][0]['imageHeight']
				width = x['annotation'][0]['imageWidth']
				xrmin = x['annotation'][0]['points'][0][0]
				xrmax = x['annotation'][0]['points'][2][0]
				yrmin = x['annotation'][0]['points'][0][1]
				yrmax = x['annotation'][0]['points'][2][1]
				xmin = int(xrmin * width)
				ymin = int(yrmin * height)
				xmax = int(xrmax * width)
				ymax = int(yrmax * height)
				area = (xmin, ymin, xmax, ymax)
				if(not args.disableVerbose):
					print('Cropping %s' % (save_path+file_name))
				res = img.crop(area)
				res.save(save_path+x['content'].split('/')[-1])
				if(not args.disableVerbose):
					print('Cropped %s, saving...' % x['content'].split('/')[-1])
	except IOError as e:
		print("Operation failed: %s" % e.strerror)

if __name__ == '__main__':
	crop_images()